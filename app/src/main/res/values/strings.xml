<resources>
    <string name="quiz_name">Quiz</string>
    <string name="action_settings">Settings</string>
    <string name="title_activity_detail">Details</string>
    <string name="section_format">Hello World from section: %1$d</string>
    <string name="q1_1">The signature of a method consists of a method name and parameter list</string>
    <string name="q1_2">All java application must have a method public static Main (String[] args)</string>
    <string name="q1_3">Arguments to methods always appear within brackets</string>
    <string name="q1_4">When you invoke a method with a parameter, the value of the argument is passed to the parameter. This is referred to as pass by value</string>
    <string name="q1_5">A variable defined inside a method is referred to as a local variable</string>

    <string name="q2_1">An object represents an entity in the real world that can be distinctly identified</string>
    <string name="q2_2">A class is a construct that defines objects of the same type</string>
    <string name="q2_3">They keyword class is required to declare a class</string>
    <string name="q2_4">A method with a return type is invoked to create an object</string>
    <string name="q2_5">A method that is associated with an individual object is called an object method</string>

    <string name="q3_1">Object-oriented programming allows you to derive new classes from existing classes. This is called abstraction</string>
    <string name="q3_2">You cannot invoke a method in superclass\'s parent class</string>
    <string name="q3_3">A constructor may be static</string>
    <string name="q3_4">A constructor may not invoke an overloaded constructor</string>
    <string name="q3_5">A constructor invokes its superclass no-arg constructor by default if a constructor does not invoke an overloaded constructor or its superclass\'s constructor</string>

    <string name="q4_1">Every JavaFX main class extends javafx.application.Application</string>
    <string name="q4_2">A node can be placed in a scene</string>
    <string name="q4_3">To add a circle object into a pane, use: pane.getChildren().add(circle);</string>
    <string name="q4_4">A Shape can be placed in a Control</string>
    <string name="q4_5">To add a radio button into a pane, use: pane.getaddAll(button);</string>

    <string name="q5_1">A java exception is an instance of RuntimeException</string>
    <string name="q5_2">An instance of Exception describes the errors caused by your program and external circumstances</string>
    <string name="q5_3">An instance of NumberFormatException describes system errors</string>
    <string name="q5_4">An instance of RuntimeException describes programming errors, such as bad casting and numeric errors</string>
    <string name="q5_5">The following code causes Java to throw no exceptions:
        int number = Integer.MAX_VALUE + 1;
    </string>
    <string name="q6_1">To register a source for an action event with a handler, use source.setOnAction(handler)</string>
    <string name="q6_2">To handle the mouse click event on a pane p, register the handler with p using p.setOnKeyClicked(handler); </string>
    <string name="q6_3">To handle the key pressed event on a pane p, register the handler with p using: p.setOnKeyClicked(handler); </string>
    <string name="q6_4">A JavaFX action event handler contains a method public void handle(ActionEvent e)</string>
    <string name="q6_5">A JavaFX event handler for event type T is an instance of EventHandler&lt;T&gt;</string>

    <string name="q7_1">In a relational data model, structure defines the representation of the data</string>
    <string name="q7_2">In a relational data model, SQL imposes constraints on the data</string>
    <string name="q7_3">In a relational model, Integrity provides the means for accessing and manipulating data</string>
    <string name="q7_4">Domain constraints specify the permissible values for an attribute</string>
    <string name="q7_5">A candidate key is an attribute or a set of attributes that uniquely identifies the relation</string>

    <string name="q8_1">public abstract method();
        The above code declares an abstract method in an abstract java class</string>
    <string name="q8_2">A subclass cannot extend more than one class, but may implement any number of interfaces</string>
    <string name="q8_3">A subclass of a non-abstract class must be non-abstract</string>
    <string name="q8_4">Domain constraints are known as intra-relational constraints, meaning that a constraint involves only one relation</string>
    <string name="q8_5">An interface cannot extend more than one interface</string>


    <string name="true_button">True</string>
    <string name="false_button">False</string>
    <string name="correct_Toast">Correct!</string>
    <string name="incorrect_Toast">Incorrect</string>
</resources>
